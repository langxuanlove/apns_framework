<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
	http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">
    
    <aop:aspectj-autoproxy proxy-target-class="true"/> 
    
	<context:annotation-config />
	<!-- 把标记了@Controller注解的类转换为bean -->
	<context:component-scan base-package="com.gnet" />
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
		
	<!-- 下面设置了从后台调用前台JSP时，只能在WEB-INF下JSP文件夹下寻找 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- 最大上传限制 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="104857600" />
		<property name="maxInMemorySize" value="4096" />
	</bean>
	
	<!-- 配置连接数据库 地图的数据库-->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
   		<property name="jdbcUrl" value="jdbc:mysql://"></property>
   		<property name="user" value="test"></property>
   		<property name="password" value="userncw"></property>
    	<property name="minPoolSize" value="10" />
    	<property name="maxPoolSize" value="100" />
    	<property name="maxIdleTime" value="60" />
    	<property name="acquireIncrement" value="2" />
    	<property name="maxStatements" value="0" />
    	<property name="initialPoolSize" value="10" />
    	<property name="idleConnectionTestPeriod" value="60" />
    	<property name="testConnectionOnCheckin" value="true" />
    	<property name="testConnectionOnCheckout" value="true" />
    	<property name="acquireRetryAttempts" value="30" />
    	<property name="acquireRetryDelay" value="100" />
    	<property name="checkoutTimeout" value="300000"/> 
    	<property name="breakAfterAcquireFailure" value="true" />
	</bean>
	<!-- 配置连接数据库 消息保存的数据库-->
	<bean id="dataSourceInfo" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
   		<property name="jdbcUrl" value="jdbc:mysql://192.168.4.52:3306/gnet_info"></property>
   		<!-- <property name="jdbcUrl" value="jdbc:mysql://114.112.90.46:7733/gnet_iot_sys"></property> -->
   		<property name="user" value="root"></property>
   		<property name="password" value="123456"></property>
    	<property name="minPoolSize" value="10" />
    	<property name="maxPoolSize" value="100" />
    	<property name="maxIdleTime" value="60" />
    	<property name="acquireIncrement" value="2" />
    	<property name="maxStatements" value="0" />
    	<property name="initialPoolSize" value="10" />
    	<property name="idleConnectionTestPeriod" value="60" />
    	<property name="testConnectionOnCheckin" value="true" />
    	<property name="testConnectionOnCheckout" value="true" />
    	<property name="acquireRetryAttempts" value="30" />
    	<property name="acquireRetryDelay" value="100" />
    	<property name="checkoutTimeout" value="300000"/> 
    	<property name="breakAfterAcquireFailure" value="true" />
	</bean>
	<!-- JDBC模板 -->  
    <bean id="jdbcTemplate"  
        class="org.springframework.jdbc.core.JdbcTemplate">  
        <property name="dataSource" ref="dataSource" />  
    </bean>
	<bean id="jdbcTemplateInfo"  
        class="org.springframework.jdbc.core.JdbcTemplate">  
        <property name="dataSource" ref="dataSourceInfo" />  
    </bean>
	<bean id="txManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSourceInfo" />  
    </bean>

	<!-- 用注解来实现事务管理 -->
	<tx:annotation-driven transaction-manager="txManager" />
	
	<!-- 添加springAOP切面支持 -->
	<aop:aspectj-autoproxy/>  
    
     <!-- activeMQ集成 -->
    <!-- Spring提供的JMS工具类，它可以进行消息发送、接收等  pubSubDomain为false是queue模式-->  
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">  
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->  
        	 <property name="connectionFactory" ref="connectionFactory"/>  
        <!-- <property name="connectionFactory" ref="jmsSendFactory"/>  -->
        <property name="pubSubDomain" value="false"/> 
    </bean>  
    <!-- 订阅模式 -->
    <bean id="jmsTopicTemplate" class="org.springframework.jms.core.JmsTemplate">
		 <property name="connectionFactory" ref="connectionFactory"/> 
		<!-- pub/sub模型（发布/订阅） -->
		<property name="pubSubDomain" value="true" />
	</bean>
	
    <!-- activemq线程池配置 接受消息-->
	  <bean id="jmsFactory" class="org.apache.activemq.pool.PooledConnectionFactory" destroy-method="stop">
	    <property name="connectionFactory">
	      <bean class="org.apache.activemq.ActiveMQConnectionFactory">
	        <property name="brokerURL" value="failover:(tcp://192.168.4.25:61616,tcp://192.168.4.26:61616,tcp://192.168.4.27:61616)"/>
	        <property name="transportListener">
	        	<bean class="com.gnet.action.listener.ServerTransportListener"/> 
	        </property>
	      </bean>
	    </property>
	  </bean>
    
	      <!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供-->
    <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="failover:(tcp://192.168.4.25:61616,tcp://192.168.4.26:61616,tcp://192.168.4.27:61616)"/>
        <property name="transportListener">
	        	<bean class="com.gnet.action.listener.ServerTransportListener"/> 
	    </property>
    </bean>
    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
        <property name="connectionFactory" ref="targetConnectionFactory"/>
        <property name="maxConnections" value="10"/>
    </bean>
    
    <bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
        <property name="targetConnectionFactory" ref="pooledConnectionFactory"/>
    </bean>
	  
    <!--这个是队列目的地-->  
   <bean id="queueDestinationQueue" class="org.apache.activemq.command.ActiveMQQueue">  
        <constructor-arg>  
       <!--  监听发送给服务器的消息  
            <value>queue</value>-->
            <value>gnet_queue</value>
        </constructor-arg> 
    </bean> 
    <!--这个是订阅目的地-->  
   <bean id="queueDestinationTopic" class="org.apache.activemq.command.ActiveMQTopic">  
        <constructor-arg>  
     <!--     监听发送给服务器的消息-->
            <value>gnet_topic</value>  
        </constructor-arg>  
    </bean>  
    
    
    <!--这个是sessionAwareQueue目的地-->  
   <bean id="sessionAwareQueue" class="org.apache.activemq.command.ActiveMQQueue">  
        <constructor-arg>  
            <value>queue</value>  
        </constructor-arg>  
    </bean> 
    <!-- 监听全部屏蔽了 -->
    <!-- 消息监听器 -->  
    <!-- <bean id="consumerMessageListenerQueue" class="com.gnet.module.test.listener.ConsumerMessageListener"/> -->
   <!--  <bean id="consumerSessionAwareMessageListener" class="com.gnet.action.listener.ConsumerSessionAwareMessageListener">
    	响应发给指定的queue
    	<property name="destination" ref="queueDestinationQueue"/>  
    </bean>
    <bean id="consumerMessageListenerQueue" class="com.gnet.mq.consumer.queue.QueueReceiver"/>
    <bean id="consumerMessageListenerTopic" class="com.gnet.mq.consumer.topic.TopicReceiver"/>   -->
    
    <!-- 消息监听容器   队列模式-->  
  <!--   <bean id="jmsContainerQueue"  
        class="org.springframework.jms.listener.DefaultMessageListenerContainer">  
        使用的是不是pool
        <property name="connectionFactory" ref="connectionFactory" />  
        <property name="destination" ref="queueDestinationQueue" />  
        <property name="messageListener" ref="consumerMessageListenerQueue" />  
    </bean>  -->
    <!-- 消息监听容器  订阅模式 -->
   <!-- <bean id="jmsContainerTopic"  
        class="org.springframework.jms.listener.DefaultMessageListenerContainer">  
        使用的是pool
        <property name="connectionFactory" ref="jmsFactory"/>  
        <property name="destination" ref="queueDestinationTopic" />  
        <property name="messageListener" ref="consumerMessageListenerTopic" />  
    </bean>  -->
    
    <!-- 监听session容器 -->
    <!--  <bean id="sessionAwareListenerContainer"  
        class="org.springframework.jms.listener.DefaultMessageListenerContainer">  
        <property name="connectionFactory" ref="jmsFactory" />  
        <property name="destination" ref="sessionAwareQueue" />  
        <property name="messageListener" ref="consumerSessionAwareMessageListener" />  
    </bean>  --> 
</beans>